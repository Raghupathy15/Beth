# Copyright 2018-2019 Alexandre DÃ­az
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from odoo import api, fields, models, _
from odoo.exceptions import UserError
from odoo.exceptions import Warning


class ProductTemplate(models.Model):
    _inherit = "product.template"

    # def name_get(self):
    #     return [(product.id, "%s (%s)" % (product.name, product.product_code)) for product in self]

    rrp_unit_price = fields.Float('RRP Unit Price')
    product_code = fields.Integer("SAP Code")

    product_group_id = fields.Many2one('product_group.master', string="Product Group")
    product_category_id = fields.Many2one('product_category.master', string="Product Category")
    series = fields.Integer("Series")
    length = fields.Integer("Length")
    width = fields.Integer("Width")
    height = fields.Integer("Height")
    weight = fields.Float("Weight")
    package_vol_cum = fields.Float("Package Volume (CUM)")
    number_packets = fields.Integer("Number of Packets")
    warranty_months = fields.Integer("Warranty (months)")
    carcass_area = fields.Char("Carcass Area")
    facia_area = fields.Char("Facia Area")

    nationality = fields.Selection([('belgium','Belgium'),('german','German'),('american','American')],string='Nationality')

    @api.model
    def name_search(self, name, args=None, operator='ilike', limit=100):
        args = args or []
        recs = self.search([('product_code', operator, name)] + args, limit=limit)
        if not recs.ids:
            return super(ProductTemplate, self).name_search(name=name, args=args,
                                                       operator=operator,
                                                       limit=limit)
        return recs.name_get()

    def name_get(self):
        result = []
        for product in self:
            name = product.name + '-' + str(product.product_code)
            result.append((product.id, name))
        return result


class ProductGroupMaster(models.Model):
    _name = "product_group.master"

    name = fields.Char("Name")

class ProductCategoryMaster(models.Model):
    _name = "product_category.master"

    name = fields.Char("Name")

class ProductTemplateAttributeValueInherit(models.Model):
    """Materialized relationship between attribute values
    and product template generated by the product.template.attribute.line"""

    _inherit = "product.template.attribute.value"

    def _get_combination_name(self):
        """Exclude values from single value lines or from no_variant attributes."""
        return ", ".join([ptav.attribute_id.name + '-' + ptav.name for ptav in self._without_no_variant_attributes()._filter_single_value_lines()])